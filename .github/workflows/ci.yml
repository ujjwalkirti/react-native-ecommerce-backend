name: Build and Push to ECR

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker Image with Kaniko
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG=latest
          docker run --rm \
            -v $(pwd):/workspace \
            -v /kaniko/.docker:/kaniko/.docker \
            gcr.io/kaniko-project/executor:latest \
            --no-push \
            --destination=my-app:$IMAGE_TAG \
            --dockerfile=Dockerfile

      - name: Scan Docker Image with Trivy (Remote Scan)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest"
          format: "table"
          exit-code: 0  # Don't Fail the build if vulnerabilities are found
          ignore-unfixed: true
          
      - name: Push Image to ECR (only if scan passes)
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG=latest
          docker run --rm \
            -v $(pwd):/workspace \
            -v /kaniko/.docker:/kaniko/.docker \
            -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            -e AWS_REGION=ap-south-1 \
            gcr.io/kaniko-project/executor:latest \
            --destination=$ECR_REGISTRY/${{ secrets.ECR_REPOSITORY_NAME }}:$IMAGE_TAG \
            --dockerfile=Dockerfile
